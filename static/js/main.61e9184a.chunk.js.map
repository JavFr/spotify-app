{"version":3,"sources":["redux/actions/login.js","redux/actions/actionTypes.js","redux/actions/items.js","redux/actions/playlist.js","components/searchBar.jsx","components/searchList.jsx","components/searchSection.jsx","containers/searchSection.jsx","config.js","components/loginComponent.jsx","components/playlistSection.jsx","containers/playlistSection.jsx","App.js","AppContainer.js","serviceWorker.js","redux/reducers/login.js","redux/reducers/reducer.js","redux/reducers/playlist.js","index.js","redux/storeCreator.js"],"names":["getUserData","data","type","payload","searchItems","query","token","dispatch","name","toggleLoading","$","url","toLowerCase","replace","beforeSend","xhr","setRequestHeader","success","searchUpdateResults","error","jqXHR","textStatus","errorThrown","Error","console","log","message","results","tracks","items","map","item","id","album","preview_url","artist","artists","image","images","createdPlaylistToProps","loadUserPlaylists","choosePlaylistAndRetrieve","playlistId","updateListOfTracks","updateTracks","addTracksLoading","addTracksError","removeTrackLoading","SearchBar","props","className","icon","onChange","event","target","value","placeholder","aria-label","isLoading","role","PlayButton","useState","isPlaying","setState","playAudio","Promise","resolve","reject","audio","document","getElementById","play","onerror","onended","overlay","floating","flat","style","color","size","onClick","pause","then","far","opacity","src","source","AddTrackButton","allowPress","SearchList","fluid","list","overflowY","maxHeight","overflowX","length","tag","key","alt","body","heading","allowAdd","addToPlaylist","SearchSection","backgroundColor","search","searchIsLoading","resultOfSearch","track","addTrackToPlaylist","playlist","connect","state","loginReducer","reducer","addTracksIsLoading","playlistReducer","tracksLoading","tracksError","scopes","ModalLogin","isOpen","href","join","OpenOrCreatePlaylist","createPlaylist","openPlaylist","PlaylistTopMenu","title","RenderPlaylist","removeTrack","loading","CreatePlaylistModal","description","public","setFormData","toggle","label","rows","submit","ChoosePlaylistModal","setPlaylist","hover","Playlist","createModal","setCreateModal","chooseModal","setChooseModal","minHeight","getUserPlaylists","userId","chooseIsLoading","choosePlaylist","onChooseSumbit","JSON","stringify","descrition","userID","trackData","dataType","contentType","removeTrackFromPlaylist","App","this","getToken","md","Component","window","location","hash","substring","split","reduce","initial","parts","decodeURIComponent","access_token","retrieveUserData","Boolean","hostname","match","action","initialState","filter","store","createStore","combineReducers","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","AppContainer","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61e9184a.chunk.js","sourcesContent":["import { GET_TOKEN, GET_USER_DATA } from './actionTypes';\nimport * as $ from 'jquery';\n\n\n\n\nexport const getToken = () => {\n\n    const hash = window.location.hash\n        .substring(1)\n        .split(\"&\")\n        .reduce(function(initial, item) {\n            if (item) {\n            var parts = item.split(\"=\");\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n            }\n            return initial;\n        }, {});\n    \n    return {\n        type: GET_TOKEN,\n        payload: hash.access_token\n    }\n};\n\nexport const retrieveUserData = (token) => (dispatch) => {\n\n    $.ajax({\n        url: 'https://api.spotify.com/v1/me',\n        type: \"GET\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(getUserData(data));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n            const error = new Error(errorThrown + ': ' + textStatus);\n            console.log(error.message);\n        }\n      })\n}\n\nexport const getUserData = (data) => {\n\n    return {\n        type: GET_USER_DATA,\n        payload: data\n    }\n}\n\n\n\n","\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const GET_USER_DATA = 'GET_USER_DATA';\nexport const LOGIN = 'LOGIN';\n\nexport const SEARCH_ITEMS = 'SEARCH_ITEMS';\nexport const SEARCH_IS_LOADING = 'SEARCH_IS_LOADING';\nexport const SEARCH_UPDATE_RESULTS = 'SEARCH_UPDATE_RESULTS';\n\n/*PLAYLIST*/\nexport const CREATE_PLAYLIST = 'CREATE_PLAYLIST';\nexport const GET_USER_PLAYLISTS = 'GET_USER_PLAYLISTS';\nexport const CHOOSE_PLAYLIST = 'CHOOSE_PLAYLIST';\nexport const LOAD_TRACKS = 'LOAD_TRACKS';\nexport const UPDATE_TRACKS = 'ADD_TRACKS';\nexport const ADD_TRACKS_LOADING = 'ADD_TRACKS_LOADING';\nexport const ADD_TRACKS_ERROR = 'ADD_TRACKS_ERROR';\nexport const REMOVE_TRACK = 'REMOVE_TRACK';\nexport const REMOVE_TRACK_LOADING = 'REMOVE_TRACK_LOADING';\nexport const REMOVE_TRACK_ERROR = 'REMOVE_TRACK_ERROR';\n\n","import { SEARCH_ITEMS, SEARCH_IS_LOADING, SEARCH_UPDATE_RESULTS } from './actionTypes';\nimport * as $ from 'jquery';\n\nexport const searchItems = (query, token) => (dispatch) => {\n\n  if (query.name !== '') {\n\n    dispatch(toggleLoading());\n\n    $.ajax({\n        url: `https://api.spotify.com/v1/search?q=${query.name.toLowerCase().replace(/\\s/g,'%20')}&type=${query.type}&limit=5`,\n        type: \"GET\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(searchUpdateResults(data));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          const error = new Error(errorThrown + ': ' + textStatus);\n          console.log(error.message);\n        }\n      })\n\n    }\n};\n\nexport const toggleLoading = () => ({\n  type: SEARCH_IS_LOADING\n});\n\nexport const searchUpdateResults = (results) => {\n\n\n  return {\n    type: SEARCH_UPDATE_RESULTS,\n    payload: results.tracks.items.map((item) => {\n                return { \n                  id: item.id,\n                  name: item.name, \n                  album: item.album.name, \n                  preview_url: item.preview_url, \n                  artist: item.artists[0].name, \n                  image: item.album.images[0]}\n              })\n  }\n}","import { CREATE_PLAYLIST, GET_USER_PLAYLISTS, CHOOSE_PLAYLIST, LOAD_TRACKS, \n    UPDATE_TRACKS, ADD_TRACKS_ERROR, ADD_TRACKS_LOADING, REMOVE_TRACK, REMOVE_TRACK_ERROR, REMOVE_TRACK_LOADING } from './actionTypes';\nimport * as $ from 'jquery';\n\nexport const createPlaylist = (playlist, token, userId) => (dispatch) => {\n\n    if (playlist.name !== '' && playlist.description !== '') {\n\n    $.ajax({\n        url: `https://api.spotify.com/v1/users/${userId}/playlists`,\n        type: \"POST\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        data: JSON.stringify({\n            name: playlist.name,\n            description: playlist.descrition,\n            public: playlist.public\n        }),\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(createdPlaylistToProps(data));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          const error = new Error(errorThrown + ': ' + textStatus);\n          console.log(error.message);\n        }\n        \n      })\n\n    }\n};\n\nexport const createdPlaylistToProps = (data) => {\n    return {\n        type: CREATE_PLAYLIST,\n        payload: data\n    }\n}\n\nexport const getUserPlaylists = (token, userId) => dispatch => {\n\n    $.ajax({\n        url: `https://api.spotify.com/v1/me/playlists`,\n        type: \"GET\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(loadUserPlaylists(data.items));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          const error = new Error(errorThrown + ': ' + textStatus);\n          console.log(error.message);\n        }\n      })\n\n}\n\nexport const loadUserPlaylists = (data) => {\n    return {\n        type: GET_USER_PLAYLISTS,\n        payload: data\n    }\n}\nexport const choosePlaylist = (playlistId, token) => dispatch => {\n    $.ajax({\n        url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        type: \"GET\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(choosePlaylistAndRetrieve(playlistId, data.items));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          const error = new Error(errorThrown + ': ' + textStatus);\n          console.log(error.message);\n        }\n    })\n}\n\n\nexport const choosePlaylistAndRetrieve = (playlistId, tracks) => {\n    return {\n        type: CHOOSE_PLAYLIST,\n        payload: {\n            id: playlistId,\n            tracks: tracks\n        }\n    }\n}\n\n\n/* TRACKS HANDLING */\nconst updateListOfTracks = (playlistId, token) => dispatch => {\n    $.ajax({\n        url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        type: \"GET\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: (data) => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(updateTracks(data.items));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n          const error = new Error(errorThrown + ': ' + textStatus);\n          console.log(error.message);\n        }\n    })\n};\n\nconst updateTracks = (tracks) => ({\n    type: UPDATE_TRACKS,\n    payload: tracks\n});\n\n//adding tracks//\n\nconst addTracksLoading = () => ({\n    type: ADD_TRACKS_LOADING\n});\n\nconst addTracksError = (error) => ({\n    type: ADD_TRACKS_ERROR,\n    payload: error\n});\n\nexport const addTrackToPlaylist = (track, playlistId,token) => dispatch => {\n\n    dispatch(addTracksLoading);\n\n    $.ajax({\n        url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks?uris=spotify:track:${track.id}`,\n        type: \"POST\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        success: () => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(updateListOfTracks(playlistId, token));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n            const error = new Error(errorThrown + ': ' + textStatus);\n            dispatch(addTracksError(error.message));\n        }\n    })\n\n}\n\n//removing tracks//\n\nexport const removeTrackFromPlaylist = (track, playlistId, token) => dispatch => {\n    dispatch(removeTrackLoading);\n\n    const trackData = {\n        \"tracks\": [\n            {\n                \"uri\": \"spotify:track:\" + track.id\n            }\n        ]\n    }\n    console.log(trackData);\n\n    $.ajax({\n        url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        type: \"DELETE\",\n        beforeSend: (xhr) => {\n          xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n        },\n        data: JSON.stringify(trackData),\n        dataType: 'json',\n        contentType: 'application/json',\n        success: () => {\n            //data.hasOwnProperty('tracks') ? items = items.concat(data.tracks) : data.hasOwnProperty('artists') ? items = items.concat(data.artists) : items = []\n            dispatch(updateListOfTracks(playlistId, token));\n        },\n        error: (jqXHR, textStatus, errorThrown) => {\n            const error = new Error(errorThrown + ': ' + textStatus);\n            dispatch(addTracksError(\"Failed to Remove Track: \" + error.message));\n        }\n    })\n};\n\nconst removeTrackLoading = () => ({\n    type: REMOVE_TRACK_LOADING\n});\n\nconst removeTrackError = (error) => ({\n    type: REMOVE_TRACK_ERROR,\n    payload: error\n});","import React from 'react';\nimport { MDBContainer, MDBFormInline, MDBIcon } from 'mdbreact';\n\nconst SearchBar = (props) => {\n    return(\n        <MDBContainer>\n            <MDBFormInline className='md-form'>\n                <MDBIcon icon=\"search\" />\n                <input \n                    onChange={(event) => props.onChange(event.target.value)}\n                    className=\"form-control form-control-sm ml-3 w-75 text-white\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n                { props.isLoading ? \n                    <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div> : ''\n                }\n            </MDBFormInline>\n        </MDBContainer>\n    );\n}\n\nexport default SearchBar;","import React, {Component, useState} from 'react';\nimport { MDBListGroup, MDBListGroupItem, MDBContainer, MDBMedia, MDBCol, MDBRow, MDBMask, MDBView, MDBIcon, MDBBtn } from \"mdbreact\";\n\n\n\n\n\nconst SearchList = (props) =>   {\n\n    return(\n        <MDBContainer fluid className='mx-0 px-0'>\n            <MDBMedia list className=\"mt-3 px-0 mx-0\" style={{overflowY: 'scroll', maxHeight: '85vh', overflowX: 'hidden'}}>                  \n                    { (props.items && props.items.length)? \n                        props.items.map((item) => {\n                            return (                                    \n                                <MDBMedia tag=\"li\" className='my-2' key={item.id}>\n                                    <MDBRow className='align-items-center'>\n                                        <MDBCol size={4}>     \n                                            <MDBView className='hover'>\n                                                <img className=\"media-image img-fluid\" src={item.image.url} alt={item.album}/>\n                                                { item.preview_url? <PlayButton source={item.preview_url} id={item.id}/> : ''}\n                                            </MDBView>\n                                        </MDBCol>\n                                        <MDBCol size={6}>\n                                            <MDBMedia body>\n                                                <MDBMedia heading>\n                                                    {item.name}\n                                                </MDBMedia>\n                                                    {item.artist} - {item.album}\n                                            </MDBMedia>\n                                        </MDBCol>\n                                        <MDBCol size={1}>\n                                            <AddTrackButton allowPress={props.allowAdd} onClick={() => props.addToPlaylist(item)}/>\n                                        </MDBCol>  \n                                    </MDBRow>\n                                </MDBMedia>\n                                \n                            );\n                        }) : ''\n                    }\n            </MDBMedia>\n        </MDBContainer>\n    );\n}\n\n\nconst PlayButton = (props) => {\n\n    const [isPlaying, setState] = useState(false);\n\n    const toggleAudio = () => {\n        if (isPlaying){\n            document.getElementById(`audio-${props.id}`).pause();\n            setState(false);\n        }\n        else{\n            playAudio(`audio-${props.id}`)\n                .then(() => setState(false))\n                .then(() => setState(false));\n        }\n    }\n\n    const playAudio = (id) => new Promise((resolve, reject) => {\n        const audio = document.getElementById(id);\n        audio.play();\n        audio.onerror = reject;\n        audio.onended = resolve;\n        setState(true);\n    });\n\n    return(\n        <MDBMask className=\"flex-center hover\" overlay=\"teal-slight\">\n            <MDBBtn floating flat style={{'boxShadow': 'none'}} color='transparent' size='lg' onClick={toggleAudio}>\n                <MDBIcon far style={{opacity: '.8'}} icon={ isPlaying? 'pause-circle' : 'play-circle' } size='5x' className='white-text'/>\n            </MDBBtn> )  \n            <audio id={'audio-' + props.id}>\n                <source src={props.source} />\n            </audio>\n        </MDBMask>\n    );\n}\n\nconst AddTrackButton = (props) => {\n    return (\n        <MDBBtn className={props.allowPress? '' : 'disabled'} \n            floating flat style={{'boxShadow': 'none'}} \n            color='transparent' size='lg' \n            onClick={() => props.onClick()}\n            >\n            <MDBIcon style={{opacity: '.8'}} icon=\"plus\" size='2x' className='white-text'/>\n        </MDBBtn>\n    );\n}\n\nexport default SearchList;","import React from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport SearchBar from './searchBar';\nimport SearchList  from './searchList';\n\n\nconst SearchSection = (props) => {\n\n    const search = (query) => {\n        props.searchItems({\n        name: query,\n        type: 'track'\n      }, props.token)\n    }\n      \n    return(\n        <MDBContainer style={{'minHeight': '100vh', backgroundColor: '#263238'}} className='text-white'>\n            <MDBRow>\n                <MDBCol size='12'>\n                    <SearchBar onChange={(query) => search(query)} isLoading={props.searchIsLoading}/>\n                </MDBCol>\n                <MDBCol size='12'>\n                    <SearchList items={props.resultOfSearch} addToPlaylist={(track) => props.addTrackToPlaylist(track, props.playlist.id, props.token)} allowAdd={props.playlist}/>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport default SearchSection;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { searchItems, toggleLoading } from '../redux/actions/items';\nimport { addTrackToPlaylist } from '../redux/actions/playlist';\n\nimport SearchSection from '../components/searchSection';\n\nconst mapStateToProps = state => ({\n    token: state.loginReducer.token,\n    resultOfSearch: state.reducer.resultOfSearch,\n    searchIsLoading: state.reducer.searchIsLoading,\n    addTracksIsLoading: state.playlistReducer.tracksLoading,\n    addTracksError: state.playlistReducer.tracksError,\n    playlist: state.playlistReducer.playlist\n  })\n  \nconst mapDispatchToProps = dispatch => ({\n    searchItems: (query, token) => dispatch(searchItems(query, token)),\n    addTrackToPlaylist: (track, playlist, token) => dispatch(addTrackToPlaylist(track, playlist, token))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchSection);\n","export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nexport const clientId = \"9464d0a757e94b8184997bb23fc228a1\";\nexport const redirectUri = \"https://javfr.github.io/spotify-app/index\";\nexport const scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"playlist-modify-private\",\n  \"playlist-modify-public\"\n];","import React from 'react';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\n\nimport { authEndpoint, clientId, redirectUri, scopes } from '../config';\n\nconst ModalLogin = (props) => {\n    return (\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen}>\n                <MDBModalHeader className='bg-default text-white'>Welcome! <br />In order to check out this site, an spotify's authentication it's needed.</MDBModalHeader>\n                <MDBModalBody>\n                    <strong>About this site</strong><br/>\n                    This is a very simple web app that you can use to manage your Spotify's playlists. It's free of charge, and I\n                    created it just to practice with Spotify API. This is an alpha version. <br />Thanks!\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBBtn \n                        tag=\"a\"\n                        color=\"default\" \n                        href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\n                        Login to Spotify\n                    </MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\nexport default ModalLogin;","import React, {useState} from 'react';\n\nimport { MDBContainer, MDBBtn, MDBBtnGroup, MDBListGroup, MDBListGroupItem, MDBIcon, MDBInput, MDBRow, MDBCol, MDBModalHeader, MDBModalFooter, MDBModal, MDBModalBody} from \"mdbreact\";\n\n\nconst Playlist = (props) => {\n    const [createModal, setCreateModal] = useState({isOpen: false});\n    const [chooseModal, setChooseModal] = useState({isOpen: false});\n\n    const createPlaylist = (data) => {\n        props.createPlaylist(data, props.token, props.userId);\n        setCreateModal({isOpen: false});\n    }\n\n    const openPlaylistModal = () => {\n        props.getUserPlaylists(props.token, props.userId);\n        setChooseModal({isOpen: true});\n    }\n\n    const onChooseSumbit = (id) => {\n        props.choosePlaylist(id, props.token);\n        setChooseModal({isOpen: false});\n    }\n\n    return (\n        <MDBContainer style={{minHeight: '100vh', backgroundColor: '#37474F'}} className='pt-2'>\n            {!props.playlist || props.playlist.length > 1? \n                <OpenOrCreatePlaylist createPlaylist={() => setCreateModal({isOpen: true})} openPlaylist={() => openPlaylistModal() } />\n                : <div><PlaylistTopMenu title={props.playlist.name} />\n                    <RenderPlaylist items={props.tracks} \n                        removeTrack={(track) => props.removeTrack(track, props.playlist.id, props.token)}\n                        loading={props.tracksLoading}\n                        /></div>\n            }\n            <CreatePlaylistModal toggle={() => setCreateModal(!createModal.isOpen)} isOpen={createModal.isOpen} submit={(data) => createPlaylist(data)}/>\n            <ChoosePlaylistModal toggle={() => setChooseModal(!chooseModal.isOpen)} isOpen={chooseModal.isOpen} isLoading={props.chooseIsLoading} submit={(id) => onChooseSumbit(id)} items={props.playlist}/>\n        </MDBContainer>\n    );\n}\n\nexport const OpenOrCreatePlaylist = (props) => {\n    return(\n        <MDBBtnGroup>\n            <MDBBtn onClick={props.createPlaylist} color=\"info\" size=\"lg\">Create New Playlist</MDBBtn>\n            <MDBBtn onClick={props.openPlaylist} color=\"info\" size=\"lg\">Open a Playlist</MDBBtn>\n        </MDBBtnGroup>\n    );\n}\n\nexport const PlaylistTopMenu = (props) => {\n    return(\n        <MDBContainer className='bg-info z-depth-1 text-white px-2 py-1'>\n            <MDBRow className='align-items-center justify-content-between'>\n                <MDBCol className='d-flex align-items-center justify-content-between px-5'>\n                    <h1 className='text-white'>{props.title}</h1>\n                    { false? \n                    <div>\n                        <MDBBtn floating flat style={{'boxShadow': 'none'}} color='transparent' size='lg'>\n                            <MDBIcon far  icon=\"save\" size=\"2x\" />\n                        </MDBBtn>\n                        <MDBBtn floating flat style={{'boxShadow': 'none'}} color='transparent' size='lg'>\n                            <MDBIcon far  icon=\"edit\" size=\"2x\" />\n                        </MDBBtn>\n                    </div>\n                    : ''}\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    );\n}\n\nexport const RenderPlaylist = (props) => {\n\n    return(\n        <MDBContainer className='pt-3' style={{overflowY: 'scroll', maxHeight: '100vh'}} >\n            <MDBListGroup >\n                {props.items && props.items.length? props.items.map((item) => {\n                    return (<MDBListGroupItem key={item.track.id} className=\"d-flex justify-content-between align-items-center text-dark\">\n                        <div>\n                            {item.track.name}<br/> \n                            <small>{item.track.artists[0].name} - {item.track.album.name}</small>\n                        </div>\n                       \n                        <div>\n                        <MDBBtn floating flat style={{'boxShadow': 'none'}} color='transparent' size='lg' onClick={() => props.removeTrack(item.track)} >\n                            <MDBIcon far  icon=\"trash-alt\" size=\"2x\" />\n                        </MDBBtn>\n                        { false? \n                        <MDBBtn floating flat style={{'boxShadow': 'none'}} color='transparent' size='lg' onClick={() => props.onClickInfo(item.id)} >\n                            <MDBIcon icon=\"info\" size='2x'/>\n                        </MDBBtn>  \n                        : ''\n                    }\n                        </div>\n                        \n                    </MDBListGroupItem>)\n                }) : ''}\n            </MDBListGroup>\n            {props.loading? \n                <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div> :\n                ''}\n        </MDBContainer>\n    );\n}\n\nexport const CreatePlaylistModal = (props) => {\n    const [data, setFormData] = useState({\n        name: '',\n        description: '',\n        public: false\n    });\n\n    return(\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen} toggle={props.toggle}>\n                <MDBModalHeader toggle={props.toggle}>Create a new Playlist</MDBModalHeader>\n                <MDBModalBody>\n                    <form>\n                        <MDBInput onChange={(event) => setFormData({...data, name: event.target.value})} id='ModalPlaylistTitle' label=\"Title\" />\n                        <MDBInput onChange={(event) => setFormData({...data, description: event.target.value})} type=\"textarea\" label=\"Description\" rows=\"4\" />\n                        <MDBBtnGroup>\n                            <MDBBtn onClick={() => setFormData({...data, public: false})} className={!data.public? 'active' : ''} color=\"default\" size=\"lg\">Private</MDBBtn>\n                            <MDBBtn onClick={() => setFormData({...data, public: true})} className={data.public? 'active' : ''} color=\"default\" size=\"lg\">Public</MDBBtn>\n                        </MDBBtnGroup>\n                    </form>\n                </MDBModalBody>\n                <MDBModalFooter>\n                <MDBBtn color=\"secondary\" onClick={props.toggle}>Close</MDBBtn>\n                <MDBBtn color=\"primary\" onClick={() => props.submit(data)}>Create</MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\nexport const ChoosePlaylistModal = (props) => {\n    const [playlist, setPlaylist] = useState({\n        id: null\n    });\n\n    return(\n        <MDBContainer>\n            <MDBModal isOpen={props.isOpen} toggle={props.toggle}>\n                <MDBModalHeader toggle={props.toggle}>Choose a Playlist</MDBModalHeader>\n                <MDBModalBody>\n                    <MDBListGroup>\n                        {props.items && props.items.length? props.items.map((item) => {\n                            return(\n                                <MDBListGroupItem className={item.id === playlist.id? 'active' : ''} hover key={item.id} onClick={() => setPlaylist({id: item.id})}>\n                                    {item.name}\n                                </MDBListGroupItem>\n                            )\n                        }) : ''\n                        }\n                    </MDBListGroup>\n                    {props.isLoading? \n                        <MDBListGroupItem>\n                            <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </MDBListGroupItem>\n                        : ''\n                    }\n                </MDBModalBody>\n                <MDBModalFooter>\n                <MDBBtn color=\"secondary\" onClick={props.toggle}>Close</MDBBtn>\n                <MDBBtn color=\"primary\" className={ !playlist.id? 'disabled' : ''} onClick={() => props.submit(playlist.id)}>Choose</MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n}\n\n\n\n\nexport default Playlist;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { createPlaylist, getUserPlaylists, choosePlaylist, loadTracks, removeTrackFromPlaylist } from '../redux/actions/playlist';\n\nimport Playlist from '../components/playlistSection';\n\nconst mapStateToProps = state => ({\n    token: state.loginReducer.token,\n    userId: state.loginReducer.userId,\n    playlist: state.playlistReducer.playlist,\n    tracks: state.playlistReducer.tracks,\n    tracksLoading: state.playlistReducer.tracksLoading\n  })\n  \nconst mapDispatchToProps = dispatch => ({\n    createPlaylist: (playlist, token, userId) => dispatch(createPlaylist(playlist, token, userId)),\n    getUserPlaylists: (token, userID) => dispatch(getUserPlaylists(token, userID)),\n    choosePlaylist: (id, token) => dispatch(choosePlaylist(id, token)),\n    removeTrack: (track, playlistId, token) => dispatch(removeTrackFromPlaylist(track, playlistId, token))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist);\n","import React, {Component} from 'react';\n\nimport SearchSection from './containers/searchSection';\nimport ModalLogin from './components/loginComponent';\nimport Playlist from './containers/playlistSection';\n\nimport './App.css';\nimport { MDBContainer, MDBCol, MDBRow } from 'mdbreact';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      userId: null\n    };\n  }\n\n  componentDidMount() {\n    // Set token\n    this.props.getToken();\n    console.log(this.props.token);\n  }\n\n  componentDidUpdate() {\n    if (this.props.token) {\n      this.props.getUserData(this.props.token);\n    }\n  }\n\n\n  render() {\n    return(\n      <MDBContainer fluid className=\"App fluid p-0\">\n        <ModalLogin isOpen={!this.props.token} />\n        { this.props.token && (\n        <MDBRow className='no-gutters'>\n          <MDBCol size='6' md='4' >\n            <SearchSection />\n          </MDBCol>\n          <MDBCol size='6' md='8'>    \n            <Playlist />    \n          </MDBCol>\n        </MDBRow>\n        )}\n      </MDBContainer>\n    );\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { getToken, retrieveUserData } from './redux/actions/login';\nimport { searchItems } from './redux/actions/items';\n\nimport App from './App';\n\nconst mapStateToProps = state => ({\n    token: state.loginReducer.token,\n    resultOfSearch: state.reducer.resultOfSearch,\n    userId: state.loginReducer.userId\n  })\n  \nconst mapDispatchToProps = dispatch => ({\n    getToken: () => dispatch(getToken()),\n    searchItems: (query, token) => dispatch(searchItems(query, token)),\n    getUserData: (token) => dispatch(retrieveUserData(token)) \n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GET_TOKEN, GET_USER_DATA } from '../actions/actionTypes';\n\n\nexport const loginReducer = (state = { token: null, userId: null }, action) => {\n    switch (action.type) {\n        case GET_TOKEN: return { ...state, token: action.payload }\n\n        case GET_USER_DATA: return {...state, userId: action.payload.id}\n\n        default: return state\n    }\n}\n\n","import { SEARCH_IS_LOADING, SEARCH_UPDATE_RESULTS } from '../actions/actionTypes';\n\nconst initialState = {\n    resultOfSearch: null,\n    searchIsLoading: false\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SEARCH_UPDATE_RESULTS: return { ...state, resultOfSearch: action.payload, searchIsLoading: false }\n\n        case SEARCH_IS_LOADING: return { ...state, searchIsLoading: true }\n\n        default: return state\n    }\n}\n\n","import { CREATE_PLAYLIST, GET_USER_PLAYLISTS, CHOOSE_PLAYLIST, UPDATE_TRACKS, ADD_TRACKS_LOADING, ADD_TRACKS_ERROR, REMOVE_TRACK_ERROR, REMOVE_TRACK_LOADING } from '../actions/actionTypes';\n\nconst initialState = {\n    playlist: null,\n    tracks: [],\n    tracksLoading: false,\n    tracksError: null\n}\n\nexport const playlistReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_PLAYLIST: return { ...state, playlist: action.payload }\n\n        case GET_USER_PLAYLISTS: return { ...state, playlist: action.payload }\n\n        case CHOOSE_PLAYLIST: return { ...state, playlist: state.playlist.filter((playlist) => playlist.id === action.payload.id)[0], tracks: action.payload.tracks}\n\n        case UPDATE_TRACKS:  return {...state, tracks: action.payload, tracksLoading: false, tracksError: null}\n        \n        case ADD_TRACKS_ERROR: return {...state, tracksLoading: false, tracksError: action.payload }\n\n        case ADD_TRACKS_LOADING: return {...state, tracksLoading: true }\n\n        case REMOVE_TRACK_ERROR: return {...state, tracksLoading: false, tracksError: action.payload }\n\n        case REMOVE_TRACK_LOADING: return {...state, tracksLoading: true }\n\n        default: return state\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\n//Redux\nimport { Provider } from 'react-redux';\nimport storeCreator from './redux/storeCreator';\n\n/*MDB*/\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\n\nconst store = storeCreator();\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nimport { loginReducer } from './reducers/login';\nimport { reducer } from './reducers/reducer';\nimport { playlistReducer } from './reducers/playlist';\n\nexport default function() {\n    return createStore(\n            combineReducers({\n                playlistReducer,\n                loginReducer,\n                reducer\n            }),\n            applyMiddleware(ReduxThunk),\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        );\n}"],"sourceRoot":""}